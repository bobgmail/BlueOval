<h3>safehub</h3>
@page "/Safehub"
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject NavigationManager NavigationManager

<MudAlert Severity="Severity.Info" Class="mb-4">
    Connection Status: @_connectionState
</MudAlert>

@code {
    private HubConnection? _hubConnection;
    private HubConnectionState _connectionState = HubConnectionState.Disconnected;

    protected override async Task OnInitializedAsync()
    {
        await InitializeHubConnection();
    }

    private async Task InitializeHubConnection()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/msghub"))
                .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(10) })
                .Build();

            _hubConnection.Closed += OnConnectionClosed;
            _hubConnection.Reconnected += OnReconnected;

            await SafeStartConnection();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Initialization error: {ex.Message}");
        }
    }

    private async Task SafeStartConnection()
    {
        try
        {
            if (_hubConnection?.State == HubConnectionState.Disconnected)
            {
                await _hubConnection.StartAsync();
                _connectionState = _hubConnection.State;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Connection start error: {ex.Message}");
            await Task.Delay(5000);
            await SafeStartConnection(); // Retry
        }
    }

    private async Task OnConnectionClosed(Exception? ex)
    {
        _connectionState = HubConnectionState.Disconnected;
        StateHasChanged();
        await SafeStartConnection();
    }

    private Task OnReconnected(string? arg)
    {
        _connectionState = HubConnectionState.Connected;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            _hubConnection.Closed -= OnConnectionClosed;
            _hubConnection.Reconnected -= OnReconnected;
            await _hubConnection.DisposeAsync();
        }
    }
}