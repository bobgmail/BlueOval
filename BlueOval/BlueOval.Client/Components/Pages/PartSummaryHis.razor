@page "/PartsSummaryHis"

@using ClosedXML.Excel

@inject DapperContextApi sqlService;
@inject IJSRuntime JS


<PageTitle>Parts Summary</PageTitle>
<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }

</style>

@if(CycleCtrlList == null)
{
    <MudText Typo="Typo.h5" Class="ml-3" Color="Color.Success">Pallets Summary</MudText>
    <MudText Typo="Typo.h6" Class="ml-3" Color="Color.Success">Loading Data ......</MudText>
    <MudProgressCircular Color="Color.Success" Style="height:50px;width:50px;" Indeterminate="true" />
}
else
{
    <MudGrid Class="pa-4 gap-2 align-center">
        <MudItem>
            <MudText Typo="Typo.h5" Class="ml-3" Color="Color.Success">Pallets Summary</MudText>
        </MudItem>

        <MudItem>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Class="py-2"
                       OnClick="GenerateXlsReport"
                       Color="Color.Primary">Generate Excel Report</MudButton>

        </MudItem>
        @if (bReport)
        {
            <MudItem>
                <MudProgressCircular Color="Color.Success" Style="height:50px;width:50px;" Indeterminate="true" />
            </MudItem>
        }
    </MudGrid>

    <MudText Typo="Typo.h6" Class="ml-3" >Parts Info (@CycleCtrlList.Count)</MudText>

    <MudTable Class="mx-2" Items="@CycleCtrlList"  T="PartCycleCtrl"
              Height="350px" FixedHeader="true" @ref="mudTable"
              Outlined="true" Elevation="1"
              Dense="true" Hover="true" Bordered="true" Striped="true"
              OnRowClick="@OnRowClicked"
              Filter="new Func<PartCycleCtrl,bool>(FilterFunc1)"
              @bind-SelectedItem="SelectedPartCtrl"
              RowClassFunc="@SelectedRowClassFunc">                     

        

        <HeaderContent>
            <MudTh>Part #</MudTh>
            <MudTh>Part Desciption</MudTh>
            <MudTh>Part Qty</MudTh>
            <MudTh>Bin Qty</MudTh>
        </HeaderContent>

        <RowTemplate >
            <MudTd>@context.PartNo</MudTd>
            <MudTd>@context.PartDesc</MudTd>
            <MudTd>@context.PartQtySum</MudTd>
            <MudTd>@context.BinQtySum</MudTd>
        </RowTemplate>

    </MudTable>
    <MudSpacer />
    @if (SelectedPartCtrl != null && CurrentCyclePartsList.Count >0)
    {
        <MudText Typo="Typo.h6" Class="ml-3">Part [ @SelectedPartCtrl.PartNo ] at Location</MudText>
        <MudTable Class="mx-2" Items="@CurrentCyclePartsList" T="PartCycle"
                  Height="350px" FixedHeader="true" 
                  Outlined="true" Elevation="1"
                  Dense="true" Hover="true" Bordered="true" Striped="true">



            <HeaderContent>
                <MudTh>Part #</MudTh>
                <MudTh>Skid #</MudTh>
                <MudTh>Part Qty</MudTh>
                <MudTh>Bin Qty</MudTh>
                <MudTh>Location</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd>@context.PartNo</MudTd>
                <MudTd>@context.SkidNo</MudTd>
                <MudTd>@context.PartQty</MudTd>
                <MudTd>@context.BinQty</MudTd>
                <MudTd>@context.Location</MudTd>
            </RowTemplate>

        </MudTable>
    }
 
  

}


@code {


    private async Task OnRowClicked(TableRowClickEventArgs<PartCycleCtrl> args)
    {
        // if (LastClickTime.HasValue && (DateTime.Now - LastClickTime.Value).TotalMilliseconds < 500)
        // {
        //     Double-click logic
        //     await HandleDoubleClick(args.Item);
        //     LastClickTime = null;
        // }
        // else
        {
            // Single-click logic
            SelectCycleCtrlProcess(args.Item);
            //SelectedPartCtrl = args.Item;
            //LastClickTime = DateTime.Now;
        }
    }
    private MudTable<PartCycleCtrl> mudTable;
    //private PartCycleCtrl selectedItem1 = null;
    private int selectedRowNumber = -1;
    private string SelectedRowClassFunc(PartCycleCtrl element, int rowNumber)
    {
        //if (selectedRowNumber == rowNumber)     //Selected Row: None
        //{
        //    selectedRowNumber = -1;

        //    return string.Empty;
        //}
        //else
        if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))    //Selected Row: {rowNumber}
        {
            selectedRowNumber = rowNumber;

            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
    private string searchString1 = "";
    private bool FilterFunc1(PartCycleCtrl element) => FilterFunc(element, searchString1);
    private bool FilterFunc(PartCycleCtrl element, string searchString)
    {
        return true;
    }

    public List<PartCycleCtrl> CycleCtrlList { get; set; }
    public List<PartCycle> CyclePartsList{ get; set; }
    public List<PartCycle> CurrentCyclePartsList{ get; set; }

    PartCycleCtrl? SelectedPartCtrl { get; set; } = new PartCycleCtrl();

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    protected  override async Task OnInitializedAsync()
    {
        CyclePartsList = await sqlService.GetInventoryCycleInfo();
        CycleCtrlList = await sqlService.GetInventoryCycleInfoCtrl(CyclePartsList);

        if (CycleCtrlList.Count > 0)
        {
            SelectedPartCtrl = CycleCtrlList[0];
            CurrentCyclePartsList = CyclePartsList.GetRange(SelectedPartCtrl.IndexS, SelectedPartCtrl.IndexD - SelectedPartCtrl.IndexS + 1);
        }
        else
        {
            SelectedPartCtrl = null;
            CurrentCyclePartsList = [];
        }

    }

    void SelectCycleCtrlProcess(PartCycleCtrl cycleCtrl)
    {
       // if(cycleCtrl != SelectedPartCtrl)
        {
            SelectedPartCtrl = cycleCtrl;
            CurrentCyclePartsList = CyclePartsList.GetRange(SelectedPartCtrl.IndexS, SelectedPartCtrl.IndexD - SelectedPartCtrl.IndexS + 1);
        }
    }

    void ShippedClicked(PartCycle part, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            part.IsShipped = true;
            SelectedPartCtrl.CycleBinQtySum -= part.BinQty;
            SelectedPartCtrl.CyclePartQtySum -= part.PartQty;

            SelectedPartCtrl.IsCountModified = true;
        }
        else
        {
            part.IsShipped = false;
            SelectedPartCtrl.CycleBinQtySum += part.BinQty;
            SelectedPartCtrl.CyclePartQtySum += part.PartQty;

            SelectedPartCtrl.SetCountModified(CyclePartsList);
        }

    }

    bool bReport = false;
    private async Task GenerateXlsReport(MouseEventArgs e)
    {
        if (bReport)
            return;

        bReport = true;
        StateHasChanged();
        IXLWorkbook wb = new XLWorkbook();
        IXLWorksheet ws = wb.Worksheets.Add("Summary");

        int row = 1;
        int col = 1;
        ws.Cell(row, col++).Value = "Part Number";
        ws.Cell(row, col++).Value = "Part Description";
        ws.Cell(row, col++).Value = "Part Qty";
        ws.Cell(row, col++).Value = "Bin Qty";
        row++;
        col = 1;

        foreach (var part in CycleCtrlList)
        {
            ws.Cell(row, col++).Value = part.PartNo;
            ws.Cell(row, col++).SetValue(part.PartDesc);
            ws.Cell(row, col++).Value = part.PartQtySum;
            ws.Cell(row, col++).Value = part.BinQtySum;
            row++;
            col = 1;
            IXLWorksheet wss = wb.Worksheets.Add(part.PartNo);
            int row1 = 1;
            int col1 = 1;
            wss.Cell(row1, col1++).Value = "Part Number";
            wss.Cell(row1, col1++).Value = "Skid Number";
            wss.Cell(row1, col1++).Value = "Part Qty";
            wss.Cell(row1, col1++).Value = "Bin Qty";
            wss.Cell(row1, col1++).Value = "Location";
            row1++;
            col1 = 1;
            @for (int n = part.IndexS; n <= part.IndexD; n++)
            {
                PartCycle item = CyclePartsList[n];


                wss.Cell(row1, col1++).Value = item.PartNo;
                wss.Cell(row1, col1++).SetValue(item.SkidNo);
                wss.Cell(row1, col1++).Value = item.PartQty;
                wss.Cell(row1, col1++).Value = item.BinQty;
                wss.Cell(row1, col1++).Value = item.Location;
                row1++;
                col1 = 1;
            }

            //Then adjust the columns
            wss.Columns().AdjustToContents();
        }
        //Then adjust the columns
        ws.Columns().AdjustToContents();

        var stream = new MemoryStream();

        wb.SaveAs(stream);
        stream.Position = 0;


        using var streamRef = new DotNetStreamReference(stream: stream);

        string name = "Inventory Summary" + DateTime.Now.ToString("yyyy-MM-dd") + ".xlsx";
        await JS.InvokeVoidAsync("downloadFileFromStream", name, streamRef);

        bReport = false;
        StateHasChanged();
    }
}
